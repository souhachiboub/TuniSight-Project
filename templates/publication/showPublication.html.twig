

{% include "publication/addPublication.html.twig" %}

{% block body %}
<div class="container">
    {% if publications is not empty %}
        {% for publication in publications %}
        <div class="publication" data-id="{{ publication.id }}" data-full-content="{{ publication.contenu }}">
            <!-- Informations utilisateur et publication -->
            <div class="user-name-container">
                <img src="{{ asset(publication.user.photoProfil) }}" alt="Photo de l'utilisateur" class="user-photo">
                <div class="user-info">
                    <a href="#" class="profile"><h2 class="user-name">{{ publication.user.nom }} {{ publication.user.prenom }}</h2></a>
                    <div class="publication-date">{{ publication.datePublication|date('Y-m-d') }}</div>
                </div>
            </div>

            <!-- Contenu de la publication (limité à 255 caractères) -->
            {% set contenuLimit = publication.contenu|slice(0, 255) %}
            <p class="publication-contenu">
                {{ contenuLimit }}
                {% if publication.contenu|length > 255 %}
                    <span class="more-text">... <a href="#" class="show-more">Afficher plus</a></span>
                {% endif %}
            </p>

            <!-- Affichage des images -->
            {% if publication.images is not empty %}
                {% if publication.images|length == 1 %}
                    <div class="image-container">
                        <img src="{{ asset(publication.images[0].url) }}" alt="Image" class="single-image">
                    </div>
                {% else %}
                    <div class="carousel">
                        <div class="carousel-images">
                            {% for image in publication.images %}
                                <div class="image-container">
                                    <img src="{{ asset(image.url) }}" alt="Image" class="carousel-img">
                                </div>
                            {% endfor %}
                        </div>
                        <button class="carousel-prev">く</button>
                        <button class="carousel-next">く</button>
                    </div>
                {% endif %}
            {% endif %}

            <!-- Actions (like et commentaire) -->
            <div class="publication-actions">
                <button class="like-btn">
                    <span class="like-icon">{{ publication.isLiked ? '♥️' : '♡' }}</span>
                    <span class="like-count">{{ publication.nbrLike }}</span>
                </button>
                <button class="comment-btn" data-modal="commentaireModal-{{ publication.id }}">
                    <img src="{{ asset('client/images/commentaire.png') }}" alt="Icône Commentaire" class="comment-icon">
                    <span class="comment-count">{{ publication.nbrComment }}</span>
                </button>
            </div>

            <!-- Modal pour afficher la liste des commentaires et le formulaire -->
            <div id="commentaireModal-{{ publication.id }}" class="modalComment">
                <div class="modal-content-comment">
                    <a href="#" class="close">&times;</a>
                    <div class="liste-Commentaire">
                        {% if publication.commentaires is not empty %}
                        {% for commentaire in publication.commentaires %}
                            <div class="commentaire" data-id="{{ commentaire.id }}">
                                <div class="user-name-container">
                                    <img src="{{ asset(commentaire.user.photoProfil) }}" alt="Photo de l'utilisateur" class="user-photo">
                                    <div class="user-info">
                                        <a href="#" class="profile"><h2 class="user-name">{{ commentaire.user.nom }} {{ commentaire.user.prenom }}</h2></a>
                                        <div class="publication-date">{{ commentaire.date|date('Y-m-d') }}</div>
                                    </div>
                                </div>
                                <p class="commentaires-contenu">{{ commentaire.contenu }}</p>
                                <div class="commentaire-actions">
                                    <!-- Bouton like pour le commentaire, design similaire à la publication -->
                                    <button class="like-btn-comment">
                                        <span class="like-icon-comment">{{ commentaire.isLiked ? '♥️' : '♡' }}</span>
                                        <span class="like-count-comment">{{ commentaire.nbrLike }}</span>
                                    </button>
                                </div>
                            </div>
                        {% endfor %}
                        {% else %}
                            <p class="premierCommentaire">Soyer le premier à commenter</p>
                        {% endif %}
                    </div>
                    <div class="logo" style="text-align: center;">
                        <form method="post">
                        {% if formComment[publication.id] is defined %}
                            {{ form_start(formComment[publication.id], {'attr': {'id': 'commentaireForm-' ~ publication.id}}) }}
                            <div class="input-group">
                                <input type="hidden" name="publication_id" value="{{ publication.id }}">
                                <label for="{{ formComment[publication.id].contenu.vars.id }}"></label>
                                {{ form_widget(formComment[publication.id].contenu, {
                                    'attr': {
                                        'rows': '1',
                                        'cols': '33',
                                        'placeholder': 'Écrivez votre Commentaire',
                                        'required': 'required',
                                        'class': 'textarea'
                                    }
                                }) }}
                            </div>
                            {% if formComment[publication.id].contenu.vars.errors|length == 0 %}
                                <h1 style="color: red;">
                                {% for error in formComment[publication.id].contenu.vars.errors %}
                                    {{ error.message }}
                                {% endfor %}
                                 </h1>
                            {% endif %}
                            <button type="submit" class="submit-btn">Commenter</button>
                            {{ form_end(formComment[publication.id]) }}
                        {% endif %}
                    </form>
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
    {% else %}
        <p>Aucune publication pour le moment.</p>
    {% endif %}
</div>


<style>
    body {
        font-family: system-ui; 
        background: rgb(235, 233, 233);
    }
    
    .container {
        max-width: 600px;
        margin: 0 auto;
        text-align: center;
    }
    .publication-contenu {
        font-size: 1.1em;
        margin-bottom: 10px;
    }
    .publication-contenu .more-text {
        font-size: 1em;
        color: #26648E;
        cursor: pointer;
    }
    .publication-contenu .more-text a {
        color: #26648E;
        text-decoration: none;
    }
    .publication-contenu .more-text a:hover {
        text-decoration: underline;
    }
    .user-name-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        justify-content: flex-start;
    }
    .user-photo {
        width: 50px; 
        height: 50px;
        border-radius: 50%;
        margin-right: 15px;
    }
    .user-info {
        text-align: left;
    }
    .user-name {
        font-size: 1.1em;
        margin-right: 10px;
        font-weight: bold;
    }
    a.profile, h2.user-name {
        text-decoration: none;
        font-size: 1.1em;
        font-weight: bold;
        color: #2B3940;
        cursor: pointer;
    }
    a.profile, h2.user-name:hover {
        color: #26648E;
    }
    .premierCommentaire{
        font-weight: normal;
        color: #26648E;
        text-align: center;}
    .publication {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        background-color: #fff;
        text-align: left;
    }
    .publication-date {
        font-size: 0.9em;
        color: #777;
        margin-top: -10px;
    }
    .publication-header {
        font-size: 14px;
        color: #666;
    }
    /* Image unique */
    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 100%;
        overflow: hidden;
    }
    .single-image, .carousel-img {
        height: 500px; 
        width: auto; 
        max-width: 550px;
        object-fit: contain; 
        border-radius: 10px;
    }
    /* Carousel */
    .carousel {
        position: relative;
        width: 100%;
        max-width: 500px;
        overflow: hidden;
        margin: 10px auto;
        border-radius: 10px;
    }
    .carousel-images {
        display: flex;
        transition: transform 0.5s ease-in-out;
        width: 100%;
    }
    .carousel-images .image-container {
        min-width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .carousel-prev, .carousel-next {
        position: absolute;
        top: 50%;
        align-items: center;
        transform: translateY(-50%) rotate(180deg);
        background: none;
        color: rgba(0, 0, 0, 0.5);
        border: none;
        padding: 5px 15px;
        cursor: pointer;
        border-radius: 50%;
        font-size: 30px;
        font-family: 'Arial', sans-serif;
    }
    .carousel-prev {
        left: 10px;
        transform: translateY(-50%);
    }
    .carousel-next {
        right: 10px;
    }
    .carousel-prev:hover, .carousel-next:hover {
        background-color: rgba(0, 0, 0, 0.1);
        color: rgba(0, 0, 0, 0.8);
    }
    /* Like and Comment Buttons */
    .publication-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .like-btn, .comment-btn {
        display: flex; 
        align-items: center; 
        gap: 5px; 
        background: none;
        border: none;
        cursor: pointer;
        color : #2B3940;
    }
    .comment-btn img {
        width: 30px;  
        height: auto; 
        margin-right: 0px; 
        transition: transform 0.2s ease-in-out;
    }
    
    .comment-btn:hover img {
        transform: scale(1.1); 
    }
    .like-icon :hover {
        transition: transform 0.2s ease-in-out;
    }
    

    .like-icon , .comment-icon {
        font-size: 35px;
        transition: transform 0.2s ease-in-out;
        color :#2B3940;
    }
    .comment-icon {
        font-size: 25px;
    }

    .like-count , .comment-count {
        font-size: 20px;
        font-weight: normal;
        color : #2B3940;
    }

   

    .like-btn:active .like-icon {
        transform: scale(1.2);
    }
    .like-btn-comment {
        display: flex;
        align-items: center;
        gap: 5px;
        background: none;
        border: none;
        cursor: pointer;
        color: #2B3940;
    }
    .like-icon-comment {
        font-size: 35px;
        transition: transform 0.2s ease-in-out;
        color: #2B3940;
    }
    .like-count-comment {
        font-size: 20px;
        font-weight: normal;
        color: #2B3940;
    }
    /* Modal */
    .modalComment {
        display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            font-family: system-ui;
    }
    .modal-content-comment {
        background-color: #ffffff;
        margin: 10% auto;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 600px;
        text-align: left;
        position: relative;
        
    }
    .commentaire {
        background: rgba(0, 0, 0, 0.02);
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 5px;
        border-radius: 5px;
        text-align: left;
       
    }
    .modal-content-comment a.close {
        text-decoration: none;
            font-size: 30px;
            position: absolute;
            top: 5px;
            right: 10px;
            color: #26648E;
            cursor: pointer;
            font-weight: normal;
    }
    .liste-Commentaire {
        max-height: 300px; /* Hauteur fixe pour le scroll */
        overflow-y: auto;  /* Active le défilement vertical */
        margin-bottom: 20px;
        padding-right: 10px; /* Pour ajouter de l'espace pour le défilement */
    }
    /* Barre de défilement pour les navigateurs basés sur Webkit (Chrome, Safari) */
    .liste-Commentaire::-webkit-scrollbar {
    width: 8px; /* Largeur de la barre de défilement */
}


    .liste-Commentaire::-webkit-scrollbar-track {
    background-color: #f1f1f1; 
    border-radius: 10px;
}


    .liste-Commentaire::-webkit-scrollbar-thumb {
    background-color: #888; 
    border-radius: 10px;
    border: 2px solid transparent; 
    background-clip: content-box; 
}

    /* Quand on survole la barre de défilement */
    .liste-Commentaire::-webkit-scrollbar-thumb:hover {
    background-color: #555; 
}
    
</style>

<!-- Scripts JavaScript -->
<script>
document.addEventListener("DOMContentLoaded", function () {
    // ----- Carousel -----
    document.querySelectorAll(".carousel").forEach(carousel => {
        let index = 0;
        const images = carousel.querySelector(".carousel-images");
        const totalImages = images.children.length;
        const prevButton = carousel.querySelector(".carousel-prev");
        const nextButton = carousel.querySelector(".carousel-next");
    
        function updateCarousel() {
            images.style.transform = `translateX(-${index * 100}%)`;
        }
    
        if (prevButton && nextButton) {
            nextButton.addEventListener("click", () => {
                index = (index + 1) % totalImages;
                updateCarousel();
            });
            prevButton.addEventListener("click", () => {
                index = (index - 1 + totalImages) % totalImages;
                updateCarousel();
            });
        }
    });
    
    // ----- Like sur les publications -----
    document.querySelectorAll(".like-btn").forEach(button => {
        button.addEventListener("click", function (e) {
            e.stopPropagation();
            toggleLike(this);
        });
    });
    document.querySelectorAll(".publication img").forEach(image => {
        image.addEventListener("dblclick", function () {
            const publication = this.closest(".publication");
            if (publication) {
                const likeButton = publication.querySelector(".like-btn");
                if (likeButton) {
                    toggleLike(likeButton);
                }
            }
        });
    });
 
    function toggleLike(button) {
        const publicationId = button.closest(".publication").dataset.id;
        const icon = button.querySelector(".like-icon");
        const likeCount = button.querySelector(".like-count");
 
        fetch(`/like/${publicationId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        })
        .then(response => response.json())
        .then(data => {
            icon.textContent = data.liked ? "♥️" : "♡";
            likeCount.textContent = data.likes;
        })
        .catch(error => {
            console.error("Erreur lors du like :", error);
        });
    }
    
    // ----- "Afficher plus" du contenu -----
    document.querySelectorAll('.show-more').forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            const publication = this.closest('.publication');
            const fullContent = publication.dataset.fullContent;
            publication.querySelector('.publication-contenu').innerHTML = fullContent;
        });
    });
    
    // ----- Gestion des modals pour les commentaires -----
    const modals = document.querySelectorAll('.modalComment');
    const openModalButtons = document.querySelectorAll('.comment-btn');
    const closeModalButtons = document.querySelectorAll('.close');
    
    openModalButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            const modalId = button.getAttribute('data-modal');
            modals.forEach(modal => {
                modal.style.display = 'none';
            });
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
            }
        });
    });
    
    closeModalButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            const modal = button.closest('.modalComment');
            if (modal) {
                modal.style.display = 'none';
                // Image Grid and Modal/Carousel
                const imageGrids = document.querySelectorAll('.image-grid');
                const modal = document.getElementById('imageModal');
                const modalContent = modal.querySelector('.modal-content');
                const carouselImages = modal.querySelector('.carousel-images');
                const closeButton = modal.querySelector('.close-modal');
                const prevButton = modal.querySelector(".carousel-prev");
                const nextButton = modal.querySelector(".carousel-next");
                let currentImageIndex = 0;
                let images = [];
            
                imageGrids.forEach(grid => {
                    grid.addEventListener('click', handleImageGridClick);
                });
            
                closeButton.addEventListener('click', () => modal.style.display = 'none');
                window.addEventListener('click', (event) => {
                    if (event.target == modal) {
                        modal.style.display = 'none';
                    }
                });
            
                nextButton.addEventListener("click", showNextImage);
                prevButton.addEventListener("click", showPreviousImage);
            
                function handleImageGridClick(event) {
                    const publicationId = event.target.dataset.publicationId;
                    const clickedImageIndex = parseInt(event.target.dataset.imageIndex);
            
                    if (event.target.tagName === 'IMG' || event.target.classList.contains('more-images')) {
                        fetchPublicationImages(publicationId, clickedImageIndex);
                    }
                }
            
                function fetchPublicationImages(publicationId, clickedImageIndex) {
                    fetch(`/publication/${publicationId}/images`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(imageData => {
                            images = imageData;
                            currentImageIndex = clickedImageIndex || 0;
                            populateCarousel(images);
                            updateCarousel();
                            modal.style.display = 'block';
                        })
                        .catch(error => {
                            console.error("Error fetching images:", error);
                            alert("Error loading images. Please try again later.");
                        });
                }
            
                function populateCarousel(images) {
                    carouselImages.innerHTML = '';
                    images.forEach(image => {
                        const imageContainer = document.createElement('div');
                        imageContainer.classList.add('image-container');
                        const imgElement = document.createElement('img');
                        imgElement.src = `/publication/${image.url}`;
                        imgElement.classList.add('carousel-img');
                        imageContainer.appendChild(imgElement);
                        carouselImages.appendChild(imageContainer);
                    });
                }
            
                function updateCarousel() {
                    carouselImages.style.transform = `translateX(-${currentImageIndex * 100}%)`;
                }
            
                function showNextImage() {
                    currentImageIndex = (currentImageIndex + 1) % images.length;
                    updateCarousel();
                }
            
                function showPreviousImage() {
                    currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
                    updateCarousel();
                }
            
            }
        });
    });
    
    
});
    
// ----- Like sur les commentaires -----
    document.querySelectorAll(".like-btn-comment").forEach(button => {
        button.addEventListener("click", function (e) {
            e.stopPropagation();
            toggleLikeComment(this);
        });
    });
function toggleLikeComment(button) {
    const commentaireId = button.closest(".commentaire").dataset.id;
    const icon = button.querySelector(".like-icon-comment");
    const likeCount = button.querySelector(".like-count-comment");

    fetch(`/likeCommentaire/${commentaireId}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        }
    })
    .then(response => response.json())
    .then(data => {
        icon.textContent = data.liked ? "♥️" : "♡";
        likeCount.textContent = data.likes;
    })
    .catch(error => {
        console.error("Erreur lors du like sur le commentaire :", error);
    });
}
</script>
    
{% endblock %}
